name: Frontend CI

on:
  pull_request:
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'
  push:
    branches:
      - main
    paths:
      - 'frontend/**'

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: TypeScript type check
        run: npx tsc --noEmit
        continue-on-error: false

      - name: Run routing tests
        run: npm run test -- __tests__/routing
        continue-on-error: false

      - name: Run auth tests
        run: npm run test -- __tests__/contexts
        continue-on-error: false

      - name: Build production bundle
        run: npm run build
        env:
          NODE_ENV: production
          VITE_APP_VERSION: ${{ github.sha }}
          VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN }}

      - name: Upload Sentry source maps
        if: ${{ secrets.VITE_SENTRY_DSN != '' && secrets.SENTRY_AUTH_TOKEN != '' }}
        run: |
          echo "üì§ Uploading source maps to Sentry..."
          npm install -D @sentry/cli
          npx sentry-cli releases new "${{ github.sha }}"
          npx sentry-cli releases files "${{ github.sha }}" upload-sourcemaps ./dist --rewrite --url-prefix '~/'
          npx sentry-cli releases finalize "${{ github.sha }}"
          echo "‚úÖ Source maps uploaded successfully"
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        continue-on-error: true

      - name: Analyze bundle
        run: |
          # Generate bundle stats
          echo "üìä Analyzing bundle size..."
          find dist/assets/js -name "*.js" -type f -exec ls -lh {} \; | sort -k5 -hr | head -20

      - name: Check bundle size budget
        run: |
          # Fail if total JS exceeds 3MB (uncompressed)
          MAX_BYTES=3145728  # 3MB
          TOTAL_SIZE=$(find dist/assets/js -name "*.js" -type f -print0 | xargs -0 cat | wc -c)
          echo "üì¶ Total JS bundle: $TOTAL_SIZE bytes ($(($TOTAL_SIZE / 1024))KB)"
          echo "üìè Budget: $MAX_BYTES bytes ($(($MAX_BYTES / 1024))KB)"

          if [ "$TOTAL_SIZE" -gt "$MAX_BYTES" ]; then
            echo "‚ùå Bundle exceeds budget!"
            exit 1
          fi
          echo "‚úÖ Bundle within budget"

      - name: Check main chunk size
        run: |
          # Warn if main entry chunk exceeds 500KB
          MAX_MAIN=512000  # 500KB
          MAIN_SIZE=$(find dist/assets/js -name "index-*.js" -type f -print0 | xargs -0 cat | wc -c)
          echo "üì¶ Main chunk: $MAIN_SIZE bytes ($(($MAIN_SIZE / 1024))KB)"

          if [ "$MAIN_SIZE" -gt "$MAX_MAIN" ]; then
            echo "‚ö†Ô∏è Main chunk is large - consider code splitting"
          else
            echo "‚úÖ Main chunk size OK"
          fi

      - name: Upload bundle stats
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bundle-stats
          path: |
            dist/assets/js/*.js
          retention-days: 7

  accessibility:
    name: A11y Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run accessibility linter
        run: npm run lint -- --rule "jsx-a11y/*:error"
        continue-on-error: true # Warn only for now

  summary:
    name: Summary
    needs: [quality-gates, accessibility]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check results
        run: |
          if [ "${{ needs.quality-gates.result }}" != "success" ]; then
            echo "‚ùå Quality gates failed"
            exit 1
          fi
          echo "‚úÖ All quality gates passed"
