name: Security Audit

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  dependency-audit:
    runs-on: ubuntu-latest
    name: Dependency Security Audit
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
      
      - name: Create audit report directory
        run: mkdir -p security-reports
      
      - name: Backend dependency audit
        run: |
          cd backend
          npm audit --json > ../security-reports/backend-audit.json || true
          npm audit --audit-level=high
        continue-on-error: true
      
      - name: Frontend dependency audit
        run: |
          cd frontend
          npm audit --json > ../security-reports/frontend-audit.json || true
          npm audit --audit-level=high
        continue-on-error: true
      
      - name: Check for critical vulnerabilities
        run: |
          cd backend
          if npm audit --audit-level=critical; then
            echo "No critical vulnerabilities found in backend"
          else
            echo "::error::Critical vulnerabilities found in backend dependencies"
            exit 1
          fi
          
          cd ../frontend
          if npm audit --audit-level=critical; then
            echo "No critical vulnerabilities found in frontend"
          else
            echo "::error::Critical vulnerabilities found in frontend dependencies"
            exit 1
          fi
      
      - name: Upload audit reports
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-reports
          path: security-reports/
          retention-days: 30

  code-scanning:
    runs-on: ubuntu-latest
    name: Code Security Scanning
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript
      
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
            p/react
            p/nodejs

  docker-scan:
    runs-on: ubuntu-latest
    name: Container Security Scan
    if: false # Enable when using Docker
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker images
        run: |
          docker build -t digis-backend:latest ./backend
          docker build -t digis-frontend:latest ./frontend
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'digis-backend:latest'
          format: 'sarif'
          output: 'backend-trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'backend-trivy-results.sarif'

  secrets-scan:
    runs-on: ubuntu-latest
    name: Secrets Scanning
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Detect secrets with Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  license-check:
    runs-on: ubuntu-latest
    name: License Compliance Check
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
      
      - name: Install license checker
        run: npm install -g license-checker
      
      - name: Check backend licenses
        run: |
          cd backend
          npm ci
          license-checker --production --summary --out ../security-reports/backend-licenses.txt
      
      - name: Check frontend licenses
        run: |
          cd frontend
          npm ci
          license-checker --production --summary --out ../security-reports/frontend-licenses.txt
      
      - name: Check for problematic licenses
        run: |
          # Check for GPL, AGPL, or other copyleft licenses that might be incompatible
          if grep -E "(GPL|AGPL|LGPL)" security-reports/*-licenses.txt; then
            echo "::warning::Found potentially incompatible licenses"
          fi

  create-issue:
    runs-on: ubuntu-latest
    name: Create Security Issue
    needs: [dependency-audit, code-scanning, secrets-scan]
    if: failure()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Create issue for security vulnerabilities
        uses: actions/github-script@v7
        with:
          script: |
            const title = `Security Alert: Vulnerabilities detected on ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## Security Scan Results
            
            A security scan has detected potential vulnerabilities in the codebase.
            
            ### Actions Required:
            1. Review the security audit artifacts
            2. Run \`npm audit fix\` to automatically fix compatible issues
            3. Manually update dependencies with breaking changes
            4. Review and fix any code-level security issues
            
            ### Scan Details:
            - Workflow Run: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
            - Commit: ${context.sha}
            - Branch: ${context.ref}
            
            Please address these issues as soon as possible.
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'high-priority']
            });