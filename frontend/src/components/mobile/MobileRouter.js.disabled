import React, { lazy, Suspense, useState, useEffect } from 'react';
import { AnimatePresence, motion } from 'framer-motion';
import MobileLoadingScreen from './MobileLoadingScreen';
// import MobileBottomNavigation from './MobileBottomNavigation';  // Component not created yet
// import { useMobileUI } from './MobileUIProvider';  // Not implemented yet

// Lazy load all mobile pages for optimal code splitting
const MobileHomePage = lazy(() => import('./pages/MobileHomePage'));
const MobileExplorePage = lazy(() => import('./pages/MobileExplorePage'));
const MobileMessagesPage = lazy(() => import('./pages/MobileMessagesPage'));
const MobileWalletPage = lazy(() => import('./pages/MobileWalletPage'));
const MobileProfilePage = lazy(() => import('./pages/MobileProfilePage'));
const MobileCreatorPage = lazy(() => import('./pages/MobileCreatorPage'));
const MobileVideoCallPage = lazy(() => import('./pages/MobileVideoCallPage'));
const MobileStreamingPage = lazy(() => import('./pages/MobileStreamingPage'));
const MobileSettingsPage = lazy(() => import('./pages/MobileSettingsPage'));
const MobileNotificationsPage = lazy(() => import('./pages/MobileNotificationsPage'));

// Page transition animations
const pageTransition = {
  initial: (direction) => ({
    x: direction > 0 ? '100%' : '-100%',
    opacity: 0
  }),
  animate: {
    x: 0,
    opacity: 1,
    transition: {
      type: 'spring',
      stiffness: 300,
      damping: 30
    }
  },
  exit: (direction) => ({
    x: direction > 0 ? '-100%' : '100%',
    opacity: 0,
    transition: {
      type: 'spring',
      stiffness: 300,
      damping: 30
    }
  })
};

const MobileRouter = ({ user, profile, isCreator, isAdmin, logout, setCurrentView, onShowGoLive }) => {
  const [currentRoute, setCurrentRoute] = useState('home');
  const [routeHistory, setRouteHistory] = useState(['home']);
  const [direction, setDirection] = useState(1);
  const [routeParams, setRouteParams] = useState({});
  // const { swipeDirection, triggerHaptic } = useMobileUI();
  const swipeDirection = 1;  // Default value
  const triggerHaptic = () => {};  // No-op for now

  // Handle browser back button
  useEffect(() => {
    const handlePopState = (e) => {
      if (routeHistory.length > 1) {
        e.preventDefault();
        navigateBack();
      }
    };

    window.addEventListener('popstate', handlePopState);
    return () => window.removeEventListener('popstate', handlePopState);
  }, [routeHistory]);

  // Handle swipe navigation
  useEffect(() => {
    if (swipeDirection === 'right' && routeHistory.length > 1) {
      navigateBack();
    }
  }, [swipeDirection, routeHistory]);

  const navigateTo = (route, params = {}) => {
    if (route === currentRoute) return;
    
    triggerHaptic('light');
    setDirection(1);
    setCurrentRoute(route);
    setRouteParams(params);
    setRouteHistory(prev => [...prev, route]);
    
    // Update URL without page reload
    window.history.pushState({ route }, '', `#${route}`);
  };

  const navigateBack = () => {
    if (routeHistory.length <= 1) return;
    
    triggerHaptic('light');
    setDirection(-1);
    const newHistory = [...routeHistory];
    newHistory.pop();
    const previousRoute = newHistory[newHistory.length - 1];
    
    setCurrentRoute(previousRoute);
    setRouteHistory(newHistory);
    
    window.history.back();
  };

  const renderRoute = () => {
    const commonProps = {
      user,
      logout,
      navigateTo,
      navigateBack,
      ...routeParams
    };

    switch (currentRoute) {
      case 'home':
        return <MobileHomePage {...commonProps} />;
      case 'explore':
        return <MobileExplorePage {...commonProps} />;
      case 'messages':
        return <MobileMessagesPage {...commonProps} />;
      case 'wallet':
        return <MobileWalletPage {...commonProps} />;
      case 'profile':
        return <MobileProfilePage {...commonProps} />;
      case 'creator':
        return <MobileCreatorPage {...commonProps} />;
      case 'video-call':
        return <MobileVideoCallPage {...commonProps} />;
      case 'streaming':
        return <MobileStreamingPage {...commonProps} />;
      case 'settings':
        return <MobileSettingsPage {...commonProps} />;
      case 'notifications':
        return <MobileNotificationsPage {...commonProps} />;
      default:
        return <MobileHomePage {...commonProps} />;
    }
  };

  const shouldShowBottomNav = () => {
    const noNavRoutes = ['video-call', 'streaming'];
    return !noNavRoutes.includes(currentRoute);
  };

  return (
    <div className="mobile-router-container">
      <AnimatePresence mode="wait" custom={direction}>
        <motion.div
          key={currentRoute}
          custom={direction}
          variants={pageTransition}
          initial="initial"
          animate="animate"
          exit="exit"
          className="mobile-page-container"
        >
          <Suspense fallback={<MobileLoadingScreen />}>
            {renderRoute()}
          </Suspense>
        </motion.div>
      </AnimatePresence>

      {/* {shouldShowBottomNav() && (
        <MobileBottomNavigation
          currentRoute={currentRoute}
          onNavigate={navigateTo}
          user={user}
          profile={profile}
          isCreator={isCreator}
          isAdmin={isAdmin}
          onSignOut={logout}
          setCurrentView={setCurrentView}
          onShowGoLive={onShowGoLive}
        />
      )} */}
    </div>
  );
};

export default MobileRouter;